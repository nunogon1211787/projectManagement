@startuml
'https://plantuml.com/class-diagram

'hide circle
skinparam classAttributeIconSize 0

title US010 - As Authenticated user, i want to update its own data (e.g. photo, function...)

skinparam classAttributeIconSize 0

package "Infrastructure" <<Folder>> #lightblue  {
class "UpdatePersonalDataRoute" as route << Component >>
}

package "Interface Adapter" <<Folder>> #lightgreen {
package "Controllers" <<Folder>>{
class "SystemUserController" as ctrl << Component >> {
+updatePersonalData(json)
}
}
package "Repositories" <<Folder>>{
class "SystemUserRepository" as repository << Repository >> {
-systemUser : List<SystemUser>
+ findSystemUserByEmail(email)
}
}
}
package "Application Service API" <<Package>> #lightpink{
package "App Service" <<Folder>>{
class "UpdatePersonalDataService" as service << Component >> {
+updatePersonalData(updateUserDTO)
}
}
package "Repositories Interface" <<Folder>>{
interface "ISystemUserRepository" as interfaceSystemUserRepo << Interface >>{
+ findSystemUserByEmail(email)
}
}
}
package "DTO" <<Folder>> {
package "UpdateUserDTO" <<Folder>>{
class "UpdateUserDTO" as dto << Component >> {
- email : Email
- userName : Name
- function : Function
- photo : Photo
}
class "OutPutUpdateUserDTO" as outDTO << Component >> {
- sprintID : SprintID
- projectID : ProjectID
- name : Description
}
}
package "DTO" <<Folder>> {
package "SprintMapper" <<Folder>>{
class "SprintMapper" as mapper << Component >> {
+ toDto(newSprint)
}
}
}

package "Entity/Core/Domain" <<Folder>> #burlywood{
package "Aggregate" <<Folder>>{
class "Sprint" as sprint << Root >> {
- sprintID : SprintID
- projectID : ProjectID
- name : Description
+ Sprint(sprintID)
}
}
package "Factory" <<Folder>>{
class "SprintFactory" as sprintF << Factory >> {
+createSprint(newSprintDTO)
}
}
package "Value Object" <<Folder>>{
class "SprintID" as sprintID << Value Object >> {
-projectID : ProjectID
-sprintName : Description
+sprintID(projectID, sprintName)
}
}



@enduml