@startuml

skinparam classAttributeIconSize 0

title US012 - "As Director, I want to create a new project typology."

package "InfraEstructure" #lightblue {
    class CreateTypologyRoute <<Component>>{
    }
}

package "Interface Adapter" #lightgreen{
package "Controllers" <<Folder>>{
    class TypologyController <<Component>>{
    +createTypology(json)
    '+findTypologyByDescription(inputDto)
    '+findTypologyList()
    '+deleteTypology(inputDto)
    }
    }
    package "Repositories" <<Folder>>{
    class TypologyRepository <<Repository>>{
    '+findTypologyById(description)
    '+findAllTypology()
    +saveTypology(typology)
    +existsByTypologyId(description)
    '+deleteTypology(description)
    }
}
}

package "DTO" {
    class TypologyDTO <<Component>> {
    -description : String
    }

    class TypologyMapper <<Component>> {
    +modelToDto(typology)
    '+modelToDto(typologyList)
    }
}

package "Application Service" #implementation {
    package "App Service" {
        class CreateTypologyService <<Service>>{
        +createAndSaveTypology(inputDto)
        '+findTypologyByDescription(inputDto)
        '+findAllTypologies()
        '+deleteTypology(inputDto)
        }
    }
    package "Repositories Interface" {
        class "ITypologyRepo" as repo <<(I, Violet) Interface>> {
            '+findTypologyById(description)
            '+findAllTypology()
            +saveTypology(typology)
            +existsByTypologyId(description)
            '+deleteTypology(description)
        }
    }
    package "Typology Factory Interface" {
    class ITypologyFactory <<(I, Violet) Interface>> {
            +createTypology(inputDto)
            }
    }
}


package "Domain" #burlywood  {
    package "Factory" {
        class TypologyFactory <<Factory>> {
        +createTypology(inputDto)
        }

        class TypologyIDFactory <<Factory>> {
        +createId(inputDto)
        }
        class ITypologyIDFactory <<(I, Violet) Interface>> {
        +createId(inputDto)
        }
        class DescriptionFactory <<Factory>> {
        +createDescription(inputDto.description)
        }
        class IDescriptionFactory <<(I, Violet) Interface>> {
        +createDescription(inputDto.description)
        }
    }

    package "Aggregate" {
        class Typology <<Root>>{
            +Typology (id)
        }
    }
    package "Value Object"  {
        class TypologyID <<Value Object>>{
        +TypologyID (description)
        }
        class Description <<Value Object>>{
        +Description(inputDto.description)
        }
    }
}

CreateTypologyRoute -down..> TypologyController
TypologyController -down..> CreateTypologyService
TypologyController -right..> TypologyMapper
CreateTypologyService -right..> TypologyMapper
TypologyMapper -left..>TypologyDTO
CreateTypologyService -right..> repo
CreateTypologyService -down..> ITypologyFactory
TypologyFactory -up[hidden]..> ITypologyFactory
class TypologyFactory implements ITypologyFactory
TypologyFactory -left..> Typology
repo -up[hidden]..> TypologyRepository
class TypologyRepository implements repo
TypologyFactory -right..> ITypologyIDFactory
TypologyIDFactory -up[hidden]..> ITypologyIDFactory
class TypologyIDFactory implements ITypologyIDFactory
TypologyIDFactory -down..> TypologyID
TypologyIDFactory -left..> IDescriptionFactory
class DescriptionFactory implements IDescriptionFactory
DescriptionFactory -left..> Description

@enduml