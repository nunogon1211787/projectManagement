@startuml
'https://plantuml.com/class-diagram'hide circle
skinparam classAttributeIconSize 0

title US011 - As Authenticated User, i want to change his/her password

skinparam classAttributeIconSize 0


package "InfraEstructure" <<Rectangle>> #lightblue {
package "Route"{
    class "ChangePassword" as route <<Component>>
    }

    package "Persistence" {
    class "IUserJpa" as jpa <<Interface>>
    }
}

package "Interface Adapter" <<Rectangle>> #lightgreen {
package "Controllers" <<Folder>>{
class "UserController" as controller << Component >> {
+updatePersonalData(updateDataDTO)
}
}
package "Repositories" <<Folder>>{
class "UserRepository" as repository << Repository >> {
+ findByUserID(userID)
+ save(newUser)
}
}
}

package "Application Service API" <<Rectangle>> #lightpink{
package "App Service" <<Folder>>{
class "UserService" as service << Service >> {
+createAndSaveUser(infoDTO)
}
}

package "Repositories Interface" <<Folder>>{
interface "IUserRepository" as interfaceSystemUserRepo << Interface >>{
+ findByUserID(userID)
+save(newUser)
}
}
}
package "DTO" <<Rectangle>> {
package "DTO " <<Folder>>{
class "UpdateDataDTO" as dto << Component >> {
- userName : String
- function : String
- photo : String
- oldPassword : String
- newPassword : String
}
class "OutPutUserDTO" as outputUserDTO << Component >> {
- userName : String
- email : String
- function : String
- photo : String
- isActive: String
- assignedIdProfiles: String[]

}

}
package "DTO" <<Folder>> {
package "UserMapper" <<Folder>>{
class "UserMapper" as mapper << Component >> {
+ toDto(user)
}
}
}


package "Domain" <<Rectangle>> #burlywood{

package "Aggregate" <<Folder>>{
class "User" as user << Root >> {
- userID : UserID
- userName : Name
- photo : Photo
- password : Password
- function : Function
- isActive : false
+ User(userId, userName, photo, password, passwordConfirmation, function, visitorID)
}
}

package "Factory" as factory <<Folder>>{

package "VO Factories" as vofac <<Folder>> {

    class "UserIDFactory" as useridfac <<Factory>> {
    +createUserID(emailText)
    }

    class "UserProfileID" as userprofilefac <<Factory>> {
    +createUserID(userProfileName)
        }

    class "NameFactory" as namefac <<Factory>> {
     +createName(name)
         }

    class "PhotoFactory" as photofac <<Factory>> {
    +createPhoto(photo)
             }

    class "PasswordFactory" as pwdfac <<Factory>> {
    +createPassword(password)
               }

     class "FunctionFactory" as functionfac <<Factory>> {
     +createFunction (function)
         }
    }
        class "UserFactory" as userfactory <<Factory>> {
    +createUser(userDTO)
    }

   }

   package "Factory Interface" as int <<Folder>> {
   package "VO Factory Interface" as factoryInterface <<Folder>>{

   class "IUserProfileIDFactory" as iUserProfileIDFactory <<(I, Violet) Interface>> {
        +createUserProfileID(userProfileName)
             }

   class "IFunctionFactory" as iFunctionFactory <<(I, Violet) Interface>> {
        +createFunction(function)
             }

   class "IPasswordFactory" as iPwdFactory <<(I, Violet) Interface>> {
        +createPassword(password)
             }

   class "IPhotoFactory" as iPhotoFactory <<(I, Violet) Interface>> {
        +createPhoto(photo)
             }

   class "INameFactory" as iNameFactory <<(I, Violet) Interface>> {
         +createName(name)
              }

   class "IUserIDFactory" as iUserIDFactory <<(I, Violet) Interface>> {
         +createUserID(emailText)
              }
         }
  class "IUserFactory" as iUserFactory <<(I, Violet) Interface>> {
            +createUser(infoDTO)
                 }
         }

package "Value Object" {
class "UserID" as VO <<Value Object>> {
+UserID(email)
}

class "Name" as VO1 <<Value Object>> {
+Name (text)
}

class "Photo" as VO2 <<Value Object>> {
+Photo (photo)
}

class "Password" as VO3 <<Value Object>> {
+Password (pwd)
}


class "Function" as VO4 <<Value Object>> {
+Function (function)
}

class "UserProfileID" as VO5 <<Value Object>> {
+UserProfileID (userProfileName)
}
}
}

package "Data Model" <<Rectangle>>{
package "Assembler" <<Folder>> {
        class "UserJpaAssembler" as assemblerjpa <<Component>> {
        +toData (user)
        +toModel(userJPA)
        }
     }
    package "JPA" <<Folder>> {
        class "UserJpa" as ujpa {
        -email: UserID
        -userName: String
        -function:String
        -password: String
        -isActive: String
        -assignedIDProfiles: List<UserProfileID>
        }


route ..> controller
repository..>jpa
controller ..> service
service .right.> dto
service .down.> interfaceSystemUserRepo
repository .|> interfaceSystemUserRepo
userfactory ..down.|> iUserFactory
service .left.> mapper
mapper ..> outputUserDTO
service ..> iUserFactory
repository ..up.> assemblerjpa
repository ..> ujpa


@enduml