@startuml
'https://plantuml.com/class-diagram

'hide circle
skinparam classAttributeIconSize 0

title US009 - As Product Owner, I want to create a user story and add it to the Product Backlog

skinparam classAttributeIconSize 0

package "Infrastructure" <<Folder>> #lightblue  {
class "CreateUserStoryRoute" as route << Component >>
}

package "Interface Adapter" <<Folder>> #lightgreen {
package "Controllers" <<Folder>>{
class "CreateUserStoryController" as ctrl << Component >> {
+createUserStory(userStoryDTO)
}
}
package "Repositories" <<Folder>>{
class "UserStoryRepository" as store << Repository >> {
-userStoryList : List<UserStory>
+ save(newUserStory)
+ existsByUserStoryId(UserStoryID)
'- add(newUserStory)
}
}
}

package "Application Service API/Use Case Service" <<Rectangle>> #lightpink{
package "App Service" <<Folder>>{
class "CreateUserStoryService" as service << Component >> {
+createAndSaveUserStory(userStoryDTO)
}
}
package "Repositories Interface" <<Folder>>{
interface "IUserStoryRepo" as repo << Interface >>{
+ save(newUserStory)
+ existsByUserStoryId(UserStoryID)
}
}
package "Factory Interface" <<Folder>>{
interface "IUserStoryFactory" as factoryInterface << Interface >>{
+createUserStory(userStoryDTO)
}
}
}
package "DTO" <<Folder>> #black {
package "UserStoryDTO" <<Folder>>{
class "UserStoryDTO" as dto << Component >> {
- projectID : String
- title : String
- priority : int
- description : String
- timeEstimate : double
}
}

package "DTO" <<Folder>> {
package "UserStoryMapper" <<Folder>>{
class "UserStoryMapper" as mapper << Component >> {
+ toDto(newUserStory)
}
}
package "DTO" <<Folder>>  {
package "OutPutUsDTO" <<Folder>>{
class "OutPutUsDTO" as outdto << Component >> {
- userStoryID : String
- projectID : String
- title : String
- priority : int
- description : String
- timeEstimate : double
}
}

}

package "Entity/Core/Domain" <<Folder>> #burlywood{
package "Aggregate" <<Folder>>{
class "UserStory" as userStory << Root >> {
- userStoryID : UserStoryID
- projectID : ProjectID
- title : UsTitle
- priority : UsPriority
- description : Description
- timeEstimate : UsHour
+ UserStory(userStoryID)
}
}
package "Factory" <<Folder>>{
class "UserStoryFactory" as userStoryF << Factory >> {
+createUserStory(userStoryDTO)
}
}
package "Value Object" <<Folder>>{
class "UserStoryID" as usID << Value Object >> {
-projectID : ProjectID
-usTitle : UsTitle
+checkUsID(projectID, usTitle)
}
}
package "Value Object" <<Folder>>{
class "ProjectID" as projID << Value Object >> {
-rojectID : ProjectID
+checkUsID()
}

package "Value Object" <<Folder>>{
class "UsTitle" as usTitle << Value Object >> {
- title : UsTitle
+checkUsID()
}

package "Value Object" <<Folder>>{
class "Priority" as priority << Value Object >> {
-priority : UsPriority
+checkUsID()
}

package "Value Object" <<Folder>>{
class "Description" as desc << Value Object >> {
-description : Description
+checkUsID()
}

package "Value Object" <<Folder>>{
class "TimeEstimate" as time << Value Object >> {
-timeEstimate : UsHour
+checkUsID()
}


route ..> ctrl
'ctrl..> mapper'
ctrl..> service
'mapper..> dto
store..|> repo
service..> mapper
service..> dto
mapper..>outdto
userStoryF..> dto
service..> factoryInterface
service..left> repo
userStoryF..> usID
userStoryF..>projID
userStoryF..>usTitle
userStoryF..>priority
userStoryF..up>time
userStoryF..>desc
userStoryF..right>userStory
userStoryF..up|>factoryInterface



@enduml