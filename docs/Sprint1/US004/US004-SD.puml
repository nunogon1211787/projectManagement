@startuml
'https://plantuml.com/sequence-diagram

title US004 - As Administrator, I want to search for users

autonumber

actor Administrator as actor
participant ": SearchUsersByXRoute" as route
participant ": SearchUsersByXController" as ctrl
participant ": SearchUsersByXService" as srv
participant ": IRepositorySystemUser" as userStore
participant ": IRepositoryUserProfile" as profileStore
participant "users : List<SystemUser>" as usersList
participant ": GetUsersByXService" as dsrv
participant "usersFounded : List<SystemUser>" as users
participant "user : SystemUser" as user
participant ": GetUsersByXMapper" as map
participant "dataDto : DataDto" as dataDto
participant "usersFoundedDto : List<UserDto>" as usersDto
participant "userDto : UserDto" as dto
participant "usersJson : List<UserJson>" as listJson
participant "userJson : UserJson" as json

activate actor
autoactivate on

actor -> route : POST /users/search
note over actor, route : The parameters (name, email, profile and function) will be in the body of the request. At least, one of than must be typed or chosen.
route -> ctrl: getUsersByX()
ctrl -> map : data2Dto(data)
map --> dataDto**: create()
note over map : The sequence of this method are hidden to simplify the diagram.
map --> ctrl : dataDto
ctrl -> srv: getUsersByX(dataDto)
opt if dataDto has a profileId
srv -> profileStore: existById(dataDto.profile) : true
deactivate
end
srv -> userStore: findAll()
userStore --> usersList**: create()
userStore --> srv: users
srv -> dsrv: getUsersByX(users, data)
dsrv --> users**: create()
loop for all user in the users list
dsrv -> usersList: get(i) : user
deactivate
opt if data.name not empty
dsrv -> user: hasName(data.name) : res1
deactivate
end
opt if data.email not empty
dsrv -> user: hasEmail(data.email) : res2
deactivate
end
opt if data.function not empty
dsrv -> user: hasFunction(data.function) : res3
deactivate
end
opt if data.profile not empty
dsrv -> user: hasProfile(data.profile) : res4
deactivate
end
opt if any res true
dsrv -> users: add(user)
deactivate
end
end
dsrv --> srv: usersFounded
srv -> map: model2Dto(usersFounded)
map --> usersDto**: create()
note over map : The sequence of this method are hidden to simplify the diagram.
map --> srv: usersFoundedDto
srv --> ctrl: usersFoundedDto
ctrl -> map: dto2Json(usersFoundedDto)
map --> listJson**: create()
note over map : The sequence of this method are hidden to simplify the diagram.
map --> ctrl: usersJson
ctrl --> route: usersJson
route --> actor: Show the list of user founded by typed/chosen parameters


@enduml