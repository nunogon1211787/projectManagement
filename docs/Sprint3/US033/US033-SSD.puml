@startuml
'https://plantuml.com/sequence-diagram

title US033 - As SM/Team Member, I want to register work done on a Task

autoactivate on
autonumber

actor "SM/Team Mamber" as User
participant ": RegisterWorkToTaskUI" as Ui
participant ": RegisterWorkToTaskController" as Ctrl
participant ": Company" as company
participant "RegisterWorkToTaskMapper" as mapper
participant "userStoryIdDTO: UserStoryIdDTO" as userStoryIdDTO
participant "userStoryList : Sprintbacklog" as sprintBacklog
participant "userStory : UserStory" as userStory
participant "taskList: TaskList" as taskList
participant "taskIdDTOList: List<TaskIdDTO>" as taskIdDTOList
participant "taskIdDTO: TaskIdDTO" as taskIdDTO
participant "taskEffortDTO: TaskEffortDTO" as effortDTO
participant "user : SystemUserStore" as userStore
participant "task : Task" as task
participant "taskEffort : TaskEffort" as effort

activate User

User->Ui : starts registering a new task effort
Ui->Ctrl: getTasks(userStoryIdDTO)
Ctrl->mapper: userStoryIdDTOToUserStoryId(userStoryIdDTO)
mapper->userStoryIdDTO: getId()
userStoryIdDTO-->mapper: userStoryId
mapper-->Ctrl: userStoryId
Ctrl->sprintBacklog: getUserStoryById(userStoryId)
loop for each userStory in sprintBacklog
sprintBacklog->userStory: hasId(userStoryId)
userStory-->sprintBacklog: true
end
sprintBacklog-->Ctrl: userStory

Ctrl->userStory: getTaskList()
userStory-->Ctrl: taskList
Ctrl->taskList: getTaskList()
taskList-->Ctrl: taskList

Ctrl->mapper: taskListToTaskListDTO(taskList)
mapper->taskIdDTOList **: create()
loop for each task in taskList
mapper->taskList: get(i)
taskList-->mapper: task
mapper->mapper: taskIdDTO = taskIdToTaskIdDTO(task)
mapper->mapper:taskIdDTO = task.getId()
deactivate mapper
mapper->taskIdDTO**: create(taskIdDTO)
deactivate mapper
mapper->taskIdDTOList: add(taskIdDTO)
taskIdDTOList-->mapper: true
end
mapper-->Ctrl: taskIdDTOList
Ctrl-->Ui: taskIdDTOList
Ui-->User: asks to select the task

User -> Ui: selects the intended task (taskIdDTO)
Ui-->User: requests data(workHours, workMinutes, workDate, comment, attachment)
User -> Ui: types requested data
Ui -> Ctrl: createTaskEffort(taskEffortDTO)
note right
  taskEffortDTO has all required data, including the 'id' of the selected task and the email of the user responsible
end note
Ctrl->effortDTO: getTaskIdDTO()
effortDTO-->Ctrl: taskIdDTO
Ctrl->taskIdDTO: getTaskId()
taskIdDTO-->Ctrl: taskId
Ctrl->taskList: getTaskById(taskId)
loop for each task in taskList
taskList->task: hasId(taskId)
task-->taskList: true
end
taskList-->Ctrl: task
Ctrl->effortDTO: getWorkHours()
effortDTO-->Ctrl: workHours
Ctrl->effortDTO: getWorkMinutes()
effortDTO-->Ctrl: workMinutes
Ctrl->effortDTO: getWorkDate()
effortDTO-->Ctrl: workdate
Ctrl->effortDTO: getComment()
effortDTO-->Ctrl: comment
Ctrl->effortDTO: getAttachment()
effortDTO-->Ctrl: attachment
Ctrl->effortDTO: getEmail()
effortDTO-->Ctrl: email
Ctrl->userStore: getUserByEmail(email)
userStore-->Ctrl: user
Ctrl->task:createTaskEffort(workHours, workMinutes, workDate, comment, attachment, user)
task->effort **: createTaskEffort(workHours, workMinutes, workDate, comment, attachment, user)
task-->Ctrl: effort
Ctrl -> task: saveTaskEffort(effort)
task -> task: validateTaskEffort(effort)
deactivate task
task -> task: add(effort)
deactivate task
task -> task: updateHoursSpent(effort)
deactivate task
task -> task: updateExecutionPercentage()
deactivate task
task-->Ctrl: true
Ctrl -> userStory: updateWorkDone()
userStory-->Ctrl: true
Ctrl-->Ui : true

Ui-->User : Informs operation success.
@enduml